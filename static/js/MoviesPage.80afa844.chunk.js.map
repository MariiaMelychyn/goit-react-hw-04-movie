{"version":3,"sources":["services/moviesApi.js","components/MoviesPage/MoviesPage.jsx"],"names":["axios","defaults","baseURL","params","api_key","language","fetchTrendingMovies","a","config","url","data","results","Error","movie_id","cast","query","api","fetchMovieDetails","fetchMovieCast","fetchMovieReviews","fetchMoviesByQuery","MoviesPage","useState","movies","setMovies","setQuery","useRouteMatch","request","SetRequest","location","useLocation","useEffect","moviesApi","then","onSubmit","event","preventDefault","type","autoComplete","autoFocus","placeholder","value","onChange","currentTarget","toLowerCase","map","title","id","to","pathname","state","from"],"mappings":"uLAKAA,IAAMC,SAASC,QAHE,gCAIjBF,IAAMC,SAASE,OAAS,CACtBC,QAJc,mCAKdC,SAAU,SAGZ,IAAMC,EAAmB,uCAAG,gCAAAC,EAAA,sEAElBC,EAAS,CACbC,IAAI,uBAHkB,SAMDT,IAAMQ,GANL,uBAMhBE,EANgB,EAMhBA,KANgB,kBAOjBA,EAAKC,SAPY,gCASxB,IAAIC,MAAM,2BATc,yDAAH,qD,4CAazB,WAAiCC,GAAjC,mBAAAN,EAAA,sEAEUC,EAAS,CACbC,IAAI,SAAD,OAAWI,IAHpB,SAM2Bb,IAAMQ,EAAQK,GANzC,uBAMYH,EANZ,EAMYA,KANZ,kBAOWA,GAPX,gCASI,IAAIE,MAAM,2BATd,0D,kEAaA,WAA8BC,GAA9B,mBAAAN,EAAA,sEAEUC,EAAS,CACbC,IAAI,SAAD,OAAWI,EAAX,aAHT,SAM2Bb,IAAMQ,EAAQK,GANzC,uBAMYH,EANZ,EAMYA,KANZ,kBAOWA,EAAKI,MAPhB,gCASI,IAAIF,MAAM,2BATd,0D,kEAaA,WAAiCC,GAAjC,mBAAAN,EAAA,sEAEUC,EAAS,CACbC,IAAI,SAAD,OAAWI,EAAX,aAHT,SAM2Bb,IAAMQ,EAAQK,GANzC,uBAMYH,EANZ,EAMYA,KANZ,kBAOWA,EAAKC,SAPhB,gCASI,IAAIC,MAAM,2BATd,0D,kEAaA,WAAkCG,GAAlC,mBAAAR,EAAA,sEAEUC,EAAS,CACbC,IAAI,eACJN,OAAQ,CACNY,UALR,SAS2Bf,IAAMQ,GATjC,uBASYE,EATZ,EASYA,KATZ,kBAUWA,EAAKC,SAVhB,gCAYI,IAAIC,MAAM,2BAZd,0D,sBAgBA,IAAMI,EAAM,CACVV,sBACAW,kB,4CACAC,e,4CACAC,kB,4CACAC,mB,6CAGaJ,O,+HCnFA,SAASK,IACtB,MAA4BC,mBAAS,MAArC,mBAAOC,EAAP,KAAeC,EAAf,KACA,EAA0BF,mBAAS,IAAnC,mBAAOP,EAAP,KAAcU,EAAd,KACQhB,EAAQiB,cAARjB,IACR,EAA8Ba,mBAAS,IAAvC,mBAAOK,EAAP,KAAgBC,EAAhB,KACMC,EAAWC,cAkBjB,OAPAC,qBAAU,WAENC,IAAUZ,mBAAmBO,GAASM,KAAKT,KAG5C,CAACG,IAGF,qCACE,uBAAMO,SAdW,SAAAC,GACnBA,EAAMC,iBACNR,EAAWb,IAYT,UACE,uBACEsB,KAAK,OACLC,aAAa,MACbC,WAAS,EACTC,YAAY,qBACZC,MAAO1B,EACP2B,SAzBoB,SAAAP,GAC1BV,EAASU,EAAMQ,cAAcF,MAAMG,kBA0B/B,wBAAQP,KAAK,SAAb,SACE,+CAGHd,GACC,mCACE,6BACGA,EAAOsB,KAAI,gBAAGC,EAAH,EAAGA,MAAOC,EAAV,EAAUA,GAAV,OACV,cAAC,IAAD,CACEC,GAAI,CACFC,SAAS,GAAD,OAAKxC,EAAL,YAAYsC,GACpBG,MAAO,CACLC,KAAMtB,EAASoB,WAJrB,SAQE,6BAAcH,GAALC","file":"static/js/MoviesPage.80afa844.chunk.js","sourcesContent":["import axios from 'axios';\r\n\r\nconst BASE_URL = 'https://api.themoviedb.org/3/';\r\nconst API_KEY = '3b0a0f3678b03bfe7113d836939cb420';\r\n\r\naxios.defaults.baseURL = BASE_URL;\r\naxios.defaults.params = {\r\n  api_key: API_KEY,\r\n  language: 'en-US',\r\n};\r\n\r\nconst fetchTrendingMovies = async () => {\r\n  try {\r\n    const config = {\r\n      url: `trending/movie/week`,\r\n    };\r\n\r\n    const { data } = await axios(config);\r\n    return data.results;\r\n  } catch (error) {\r\n    new Error('No response from server');\r\n  }\r\n};\r\n\r\nasync function fetchMovieDetails(movie_id) {\r\n  try {\r\n    const config = {\r\n      url: `movie/${movie_id}`,\r\n    };\r\n\r\n    const { data } = await axios(config, movie_id);\r\n    return data;\r\n  } catch (error) {\r\n    new Error('No response from server');\r\n  }\r\n}\r\n\r\nasync function fetchMovieCast(movie_id) {\r\n  try {\r\n    const config = {\r\n      url: `movie/${movie_id}/credits`,\r\n    };\r\n\r\n    const { data } = await axios(config, movie_id);\r\n    return data.cast;\r\n  } catch (error) {\r\n    new Error('No response from server');\r\n  }\r\n}\r\n\r\nasync function fetchMovieReviews(movie_id) {\r\n  try {\r\n    const config = {\r\n      url: `movie/${movie_id}/reviews`,\r\n    };\r\n\r\n    const { data } = await axios(config, movie_id);\r\n    return data.results;\r\n  } catch (error) {\r\n    new Error('No response from server');\r\n  }\r\n}\r\n\r\nasync function fetchMoviesByQuery(query) {\r\n  try {\r\n    const config = {\r\n      url: `search/movie`,\r\n      params: {\r\n        query,\r\n      },\r\n    };\r\n\r\n    const { data } = await axios(config);\r\n    return data.results;\r\n  } catch (error) {\r\n    new Error('No response from server');\r\n  }\r\n}\r\n\r\nconst api = {\r\n  fetchTrendingMovies,\r\n  fetchMovieDetails,\r\n  fetchMovieCast,\r\n  fetchMovieReviews,\r\n  fetchMoviesByQuery,\r\n};\r\n\r\nexport default api;\r\n","import { useState, useEffect } from 'react';\r\nimport { NavLink, useRouteMatch, useLocation } from 'react-router-dom';\r\nimport moviesApi from '../../services/moviesApi';\r\n\r\nexport default function MoviesPage() {\r\n  const [movies, setMovies] = useState(null);\r\n  const [query, setQuery] = useState('');\r\n  const { url } = useRouteMatch();\r\n  const [request, SetRequest] = useState('');\r\n  const location = useLocation();\r\n\r\n  const handleRequestChange = event => {\r\n    setQuery(event.currentTarget.value.toLowerCase());\r\n  };\r\n\r\n  const handleSubmit = event => {\r\n    event.preventDefault();\r\n    SetRequest(query);\r\n  };\r\n\r\n  useEffect(() => {\r\n    const renderMoviesByQyery = () => {\r\n      moviesApi.fetchMoviesByQuery(request).then(setMovies);\r\n    };\r\n    renderMoviesByQyery();\r\n  }, [request]);\r\n\r\n  return (\r\n    <>\r\n      <form onSubmit={handleSubmit}>\r\n        <input\r\n          type=\"text\"\r\n          autoComplete=\"off\"\r\n          autoFocus\r\n          placeholder=\"Search movies here\"\r\n          value={query}\r\n          onChange={handleRequestChange}\r\n        />\r\n        <button type=\"submit\">\r\n          <span>Search</span>\r\n        </button>\r\n      </form>\r\n      {movies && (\r\n        <>\r\n          <ul>\r\n            {movies.map(({ title, id }) => (\r\n              <NavLink\r\n                to={{\r\n                  pathname: `${url}/${id}`,\r\n                  state: {\r\n                    from: location.pathname,\r\n                  },\r\n                }}\r\n              >\r\n                <li key={id}>{title}</li>\r\n              </NavLink>\r\n            ))}\r\n          </ul>\r\n        </>\r\n      )}\r\n    </>\r\n  );\r\n}"],"sourceRoot":""}