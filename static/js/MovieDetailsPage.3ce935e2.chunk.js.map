{"version":3,"sources":["services/moviesApi.js","components/MovieDetailsPage/MovieDetailsPage.jsx"],"names":["axios","defaults","baseURL","params","api_key","language","fetchTrendingMovies","a","config","url","data","results","Error","movie_id","cast","query","api","fetchMovieDetails","fetchMovieCast","fetchMovieReviews","fetchMoviesByQuery","Cast","lazy","Reviews","MovieDetailsPage","movieId","useParams","useRouteMatch","path","history","useHistory","location","useLocation","useState","movie","setMovie","isVisibleCast","setIsVisibleCast","isVisibleReviews","setIsVisibleReviews","useEffect","moviesApi","then","onClick","state","from","push","src","poster_path","alt","title","release_date","split","vote_average","overview","genres","map","genre","name","join","role","to","pathname","fallback"],"mappings":"uLAKAA,IAAMC,SAASC,QAHE,gCAIjBF,IAAMC,SAASE,OAAS,CACtBC,QAJc,mCAKdC,SAAU,SAGZ,IAAMC,EAAmB,uCAAG,gCAAAC,EAAA,sEAElBC,EAAS,CACbC,IAAI,uBAHkB,SAMDT,IAAMQ,GANL,uBAMhBE,EANgB,EAMhBA,KANgB,kBAOjBA,EAAKC,SAPY,gCASxB,IAAIC,MAAM,2BATc,yDAAH,qD,4CAazB,WAAiCC,GAAjC,mBAAAN,EAAA,sEAEUC,EAAS,CACbC,IAAI,SAAD,OAAWI,IAHpB,SAM2Bb,IAAMQ,EAAQK,GANzC,uBAMYH,EANZ,EAMYA,KANZ,kBAOWA,GAPX,gCASI,IAAIE,MAAM,2BATd,0D,kEAaA,WAA8BC,GAA9B,mBAAAN,EAAA,sEAEUC,EAAS,CACbC,IAAI,SAAD,OAAWI,EAAX,aAHT,SAM2Bb,IAAMQ,EAAQK,GANzC,uBAMYH,EANZ,EAMYA,KANZ,kBAOWA,EAAKI,MAPhB,gCASI,IAAIF,MAAM,2BATd,0D,kEAaA,WAAiCC,GAAjC,mBAAAN,EAAA,sEAEUC,EAAS,CACbC,IAAI,SAAD,OAAWI,EAAX,aAHT,SAM2Bb,IAAMQ,EAAQK,GANzC,uBAMYH,EANZ,EAMYA,KANZ,kBAOWA,EAAKC,SAPhB,gCASI,IAAIC,MAAM,2BATd,0D,kEAaA,WAAkCG,GAAlC,mBAAAR,EAAA,sEAEUC,EAAS,CACbC,IAAI,eACJN,OAAQ,CACNY,UALR,SAS2Bf,IAAMQ,GATjC,uBASYE,EATZ,EASYA,KATZ,kBAUWA,EAAKC,SAVhB,gCAYI,IAAIC,MAAM,2BAZd,0D,sBAgBA,IAAMI,EAAM,CACVV,sBACAW,kB,4CACAC,e,4CACAC,kB,4CACAC,mB,6CAGaJ,O,+HC5ETK,EAAOC,gBAAK,kBAAM,gCAClBC,EAAUD,gBAAK,kBACnB,gCAGa,SAASE,IACtB,IACQC,EAAYC,cAAZD,QACR,EAAsBE,cAAdlB,EAAR,EAAQA,IAAKmB,EAAb,EAAaA,KACPC,EAAUC,cACVC,EAAWC,cAEjB,EAA0BC,mBAAS,MAAnC,mBAAOC,EAAP,KAAcC,EAAd,KACA,EAA0CF,oBAAS,GAAnD,mBAAOG,EAAP,KAAsBC,EAAtB,KACA,EAAgDJ,oBAAS,GAAzD,mBAAOK,EAAP,KAAyBC,EAAzB,KAEAC,qBAAU,WAENC,IAAUxB,kBAAkBQ,GAASiB,KAAKP,KAG3C,CAACV,IAyBJ,OACE,qCACE,wBAAQkB,QAVG,WAEb,GAAIZ,EAASa,OAASb,EAASa,MAAMC,KACnC,OAAOhB,EAAQiB,KAAKf,EAASa,MAAMC,MAErChB,EAAQiB,KAAK,MAKX,SACE,6CAEDZ,GACC,qCACE,qBAAKa,IAAG,UA/CG,mCA+CH,OAAkBb,EAAMc,aAAeC,IAAKf,EAAMgB,QAC1D,+BACGhB,EAAMgB,MADT,IACiBhB,EAAMiB,aAAaC,MAAM,KAAK,GAD/C,OAGA,gDAAwC,GAArBlB,EAAMmB,aAAzB,OACA,0CACA,+BAAOnB,EAAMoB,WACZ,wCACA,+BAAOpB,EAAMqB,OAAOC,KAAI,SAAAC,GAAK,OAAIA,EAAMC,QAAMC,KAAK,OACnD,uBACA,0DACA,sBAAMC,KAAK,MAAM,aAAW,aAA5B,sCAGA,+BACE,6BACE,cAAC,IAAD,CACEC,GAAI,CACFC,SAAS,GAAD,OAAKrD,EAAL,UAEVkC,QAlDU,YACG,IAArBL,GACFC,GAAoB,GAEtBF,GAAiB,IA0CP,oBASF,6BACE,cAAC,IAAD,CACEwB,GAAI,CACFC,SAAS,GAAD,OAAKrD,EAAL,aAEVkC,QArDa,YACH,IAAlBP,GACFC,GAAiB,GAGnBE,GAAoB,IA4CV,0BAUJ,uBAEA,eAAC,WAAD,CAAUwB,SAAU,2FAApB,UACE,cAAC,IAAD,CAAOnC,KAAI,UAAKA,EAAL,UAAX,SACGM,GAASE,GAAiB,cAACf,EAAD,MAG7B,cAAC,IAAD,CAAOO,KAAI,UAAKA,EAAL,aAAX,SACGM,GAASI,GAAoB,cAACf,EAAD","file":"static/js/MovieDetailsPage.3ce935e2.chunk.js","sourcesContent":["import axios from 'axios';\r\n\r\nconst BASE_URL = 'https://api.themoviedb.org/3/';\r\nconst API_KEY = '3b0a0f3678b03bfe7113d836939cb420';\r\n\r\naxios.defaults.baseURL = BASE_URL;\r\naxios.defaults.params = {\r\n  api_key: API_KEY,\r\n  language: 'en-US',\r\n};\r\n\r\nconst fetchTrendingMovies = async () => {\r\n  try {\r\n    const config = {\r\n      url: `trending/movie/week`,\r\n    };\r\n\r\n    const { data } = await axios(config);\r\n    return data.results;\r\n  } catch (error) {\r\n    new Error('No response from server');\r\n  }\r\n};\r\n\r\nasync function fetchMovieDetails(movie_id) {\r\n  try {\r\n    const config = {\r\n      url: `movie/${movie_id}`,\r\n    };\r\n\r\n    const { data } = await axios(config, movie_id);\r\n    return data;\r\n  } catch (error) {\r\n    new Error('No response from server');\r\n  }\r\n}\r\n\r\nasync function fetchMovieCast(movie_id) {\r\n  try {\r\n    const config = {\r\n      url: `movie/${movie_id}/credits`,\r\n    };\r\n\r\n    const { data } = await axios(config, movie_id);\r\n    return data.cast;\r\n  } catch (error) {\r\n    new Error('No response from server');\r\n  }\r\n}\r\n\r\nasync function fetchMovieReviews(movie_id) {\r\n  try {\r\n    const config = {\r\n      url: `movie/${movie_id}/reviews`,\r\n    };\r\n\r\n    const { data } = await axios(config, movie_id);\r\n    return data.results;\r\n  } catch (error) {\r\n    new Error('No response from server');\r\n  }\r\n}\r\n\r\nasync function fetchMoviesByQuery(query) {\r\n  try {\r\n    const config = {\r\n      url: `search/movie`,\r\n      params: {\r\n        query,\r\n      },\r\n    };\r\n\r\n    const { data } = await axios(config);\r\n    return data.results;\r\n  } catch (error) {\r\n    new Error('No response from server');\r\n  }\r\n}\r\n\r\nconst api = {\r\n  fetchTrendingMovies,\r\n  fetchMovieDetails,\r\n  fetchMovieCast,\r\n  fetchMovieReviews,\r\n  fetchMoviesByQuery,\r\n};\r\n\r\nexport default api;\r\n","import { useState, useEffect, lazy, Suspense } from 'react';\r\nimport {\r\n  useParams,\r\n  Route,\r\n  NavLink,\r\n  useRouteMatch,\r\n  useHistory,\r\n  useLocation,\r\n} from 'react-router-dom';\r\nimport moviesApi from '../../services/moviesApi';\r\n\r\nconst Cast = lazy(() => import('../Cast' /* webpackChunkName: \"Cast\" */));\r\nconst Reviews = lazy(() =>\r\n  import('../Reviews' /* webpackChunkName: \"Reviews\" */),\r\n);\r\n\r\nexport default function MovieDetailsPage() {\r\n  const srcBaseUrl = 'https://image.tmdb.org/t/p/w500';\r\n  const { movieId } = useParams();\r\n  const { url, path } = useRouteMatch();\r\n  const history = useHistory();\r\n  const location = useLocation();\r\n\r\n  const [movie, setMovie] = useState(null);\r\n  const [isVisibleCast, setIsVisibleCast] = useState(false);\r\n  const [isVisibleReviews, setIsVisibleReviews] = useState(false);\r\n\r\n  useEffect(() => {\r\n    const renderMovieDetails = () => {\r\n      moviesApi.fetchMovieDetails(movieId).then(setMovie);\r\n    };\r\n    renderMovieDetails();\r\n  }, [movieId]);\r\n\r\n  const makeVisibleCast = () => {\r\n    if (isVisibleReviews === true) {\r\n      setIsVisibleReviews(false);\r\n    }\r\n    setIsVisibleCast(true);\r\n  };\r\n\r\n  const makeVisibleReviews = () => {\r\n    if (isVisibleCast === true) {\r\n      setIsVisibleCast(false);\r\n    }\r\n\r\n    setIsVisibleReviews(true);\r\n  };\r\n\r\n  const goBack = () => {\r\n    // history.goBack();\r\n    if (location.state && location.state.from) {\r\n      return history.push(location.state.from);\r\n    }\r\n    history.push('/');\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <button onClick={goBack} >\r\n        <span>Go Back</span>\r\n      </button>\r\n      {movie && (\r\n        <>\r\n          <img src={`${srcBaseUrl}${movie.poster_path}`} alt={movie.title} />\r\n          <h3>\r\n            {movie.title}({movie.release_date.split('-')[0]})\r\n          </h3>\r\n          <span>User Score: {movie.vote_average * 10}%</span>\r\n          <h2>Overview</h2>\r\n          <span>{movie.overview}</span>\r\n          {<h3>Genres</h3>}\r\n          {<span>{movie.genres.map(genre => genre.name).join(' ')}</span>}\r\n          <hr />\r\n          <span>Additional information</span>\r\n          <span role=\"img\" aria-label=\"face emoji\">\r\n            üëáüèª\r\n          </span>\r\n          <ul>\r\n            <li>\r\n              <NavLink\r\n                to={{\r\n                  pathname: `${url}/cast`,\r\n                }}\r\n                onClick={makeVisibleCast}\r\n              >\r\n                Cast\r\n              </NavLink>\r\n            </li>\r\n            <li>\r\n              <NavLink\r\n                to={{\r\n                  pathname: `${url}/reviews`,\r\n                }}\r\n                onClick={makeVisibleReviews}\r\n              >\r\n                Reviews\r\n              </NavLink>\r\n            </li>\r\n          </ul>\r\n          <hr />\r\n\r\n          <Suspense fallback={<h1>–ó–∞–≥—Ä—É–∂–∞–µ–º...</h1>}>\r\n            <Route path={`${path}/:cast`}>\r\n              {movie && isVisibleCast && <Cast />}\r\n            </Route>\r\n\r\n            <Route path={`${path}/:reviews`}>\r\n              {movie && isVisibleReviews && <Reviews />}\r\n            </Route>\r\n          </Suspense>\r\n        </>\r\n      )}\r\n    </>\r\n  );\r\n}"],"sourceRoot":""}